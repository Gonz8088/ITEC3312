Week 01

Shell:
control -c or control -d to halt execution

Variables:
can only contain letters, digits, (_), and (*)

Math Functions:
An even number %2 is always 0; An odd number %2 is always 1.
/ integer division
// floating point division
round(i): rounds a number
max(a, b, c): returns max number
min(a, b, c): returns min number
abs(-a): returns absolute value
pow(a, x): returns a to power of x



Strings:
print("some string", format(some_num, ".2f"))
#".2f" is format specifier ----- format(filed width . precision | conversion code)

LOOK UP STRING FORMATTING IN POWERPOINT

Objects:
Everything is an object in python
Objects have state and properties
Objects have methods

Selections:

Overflow: When a variable is assigned a value too large to be stored

Underflow: When a variable is assigned a value too small to be stored

Development process:
1) Requirements
2) System Analysis
3) Sys Design
4) Implement
5) Testing
6) Deployment
7) Maintenance


Week 02

Logical Operators:
- not
- and
- or

Conditional Expressions:                      #REVIEW THIS ONE
ex.1 - ticketPrice = 20 if ages >=16 else 10

ex.2 - print(count, end='\n' if count % 10 == else count, end=" ")

Operator Precedence:
+, -
**
not
*, /, //, %
+, -
<, <=, >, >=
==, !=
and
or
=, +=, -=, *=, /=, //=, %=


Week 03

When mixing positional arguments and keyword arguments, all positional arugments in a call must come first,
Then the kwargs.

Scope: the part of the program where the variable can be referenced.

A variable created inside a function is referred to as a local variable. 
Local variables can only be accessed inside a function. 
The scope of a local variable starts from its creation and continues to the end of the function that contains the variable. 

In Python, you can also use global variables. 
They are created outside all functions and are accessible to all functions in their scope. 

Example of Formal Parameters ---> def my_func(w=1, h=2):  # if no value is passed for w or h, 
then they will have value of 1 and 2.

Example of binding a global variable inside a function:
x = 1    # is a global
def my_func():
    global x
    x = x+1   # the x in here is the same as the global x
    
Example of returning more than one value:

def my_func():
    return 1, 2, 3
    
x, y, z = my_func()
